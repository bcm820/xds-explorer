/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var envoy_config_rbac_v2alpha_rbac_pb = require('./envoy/config/rbac/v2alpha/rbac_pb.js');
goog.object.extend(proto, envoy_config_rbac_v2alpha_rbac_pb);
var validate_validate_pb = require('./validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
var gogoproto_gogo_pb = require('./gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.envoy.config.filter.network.rbac.v2.RBAC', null, global);
goog.exportSymbol('proto.envoy.config.filter.network.rbac.v2.RBAC.EnforcementType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.config.filter.network.rbac.v2.RBAC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.envoy.config.filter.network.rbac.v2.RBAC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.config.filter.network.rbac.v2.RBAC.displayName = 'proto.envoy.config.filter.network.rbac.v2.RBAC';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.config.filter.network.rbac.v2.RBAC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.config.filter.network.rbac.v2.RBAC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.toObject = function(includeInstance, msg) {
  var f, obj = {
    rules: (f = msg.getRules()) && envoy_config_rbac_v2alpha_rbac_pb.RBAC.toObject(includeInstance, f),
    shadowRules: (f = msg.getShadowRules()) && envoy_config_rbac_v2alpha_rbac_pb.RBAC.toObject(includeInstance, f),
    statPrefix: jspb.Message.getFieldWithDefault(msg, 3, ""),
    enforcementType: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.config.filter.network.rbac.v2.RBAC}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.config.filter.network.rbac.v2.RBAC;
  return proto.envoy.config.filter.network.rbac.v2.RBAC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.config.filter.network.rbac.v2.RBAC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.config.filter.network.rbac.v2.RBAC}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new envoy_config_rbac_v2alpha_rbac_pb.RBAC;
      reader.readMessage(value,envoy_config_rbac_v2alpha_rbac_pb.RBAC.deserializeBinaryFromReader);
      msg.setRules(value);
      break;
    case 2:
      var value = new envoy_config_rbac_v2alpha_rbac_pb.RBAC;
      reader.readMessage(value,envoy_config_rbac_v2alpha_rbac_pb.RBAC.deserializeBinaryFromReader);
      msg.setShadowRules(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatPrefix(value);
      break;
    case 4:
      var value = /** @type {!proto.envoy.config.filter.network.rbac.v2.RBAC.EnforcementType} */ (reader.readEnum());
      msg.setEnforcementType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.config.filter.network.rbac.v2.RBAC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.config.filter.network.rbac.v2.RBAC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRules();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      envoy_config_rbac_v2alpha_rbac_pb.RBAC.serializeBinaryToWriter
    );
  }
  f = message.getShadowRules();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      envoy_config_rbac_v2alpha_rbac_pb.RBAC.serializeBinaryToWriter
    );
  }
  f = message.getStatPrefix();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEnforcementType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.EnforcementType = {
  ONE_TIME_ON_FIRST_BYTE: 0,
  CONTINUOUS: 1
};

/**
 * optional envoy.config.rbac.v2alpha.RBAC rules = 1;
 * @return {?proto.envoy.config.rbac.v2alpha.RBAC}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.getRules = function() {
  return /** @type{?proto.envoy.config.rbac.v2alpha.RBAC} */ (
    jspb.Message.getWrapperField(this, envoy_config_rbac_v2alpha_rbac_pb.RBAC, 1));
};


/** @param {?proto.envoy.config.rbac.v2alpha.RBAC|undefined} value */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.setRules = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.clearRules = function() {
  this.setRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.hasRules = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional envoy.config.rbac.v2alpha.RBAC shadow_rules = 2;
 * @return {?proto.envoy.config.rbac.v2alpha.RBAC}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.getShadowRules = function() {
  return /** @type{?proto.envoy.config.rbac.v2alpha.RBAC} */ (
    jspb.Message.getWrapperField(this, envoy_config_rbac_v2alpha_rbac_pb.RBAC, 2));
};


/** @param {?proto.envoy.config.rbac.v2alpha.RBAC|undefined} value */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.setShadowRules = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.clearShadowRules = function() {
  this.setShadowRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.hasShadowRules = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string stat_prefix = 3;
 * @return {string}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.getStatPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.setStatPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional EnforcementType enforcement_type = 4;
 * @return {!proto.envoy.config.filter.network.rbac.v2.RBAC.EnforcementType}
 */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.getEnforcementType = function() {
  return /** @type {!proto.envoy.config.filter.network.rbac.v2.RBAC.EnforcementType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.envoy.config.filter.network.rbac.v2.RBAC.EnforcementType} value */
proto.envoy.config.filter.network.rbac.v2.RBAC.prototype.setEnforcementType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


goog.object.extend(exports, proto.envoy.config.filter.network.rbac.v2);
