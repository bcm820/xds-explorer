/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var envoy_data_tap_v2alpha_http_pb = require('./envoy/data/tap/v2alpha/http_pb.js');
goog.object.extend(proto, envoy_data_tap_v2alpha_http_pb);
var envoy_data_tap_v2alpha_transport_pb = require('./envoy/data/tap/v2alpha/transport_pb.js');
goog.object.extend(proto, envoy_data_tap_v2alpha_transport_pb);
var validate_validate_pb = require('./validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.envoy.data.tap.v2alpha.TraceWrapper', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.envoy.data.tap.v2alpha.TraceWrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_);
};
goog.inherits(proto.envoy.data.tap.v2alpha.TraceWrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.envoy.data.tap.v2alpha.TraceWrapper.displayName = 'proto.envoy.data.tap.v2alpha.TraceWrapper';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.TraceCase = {
  TRACE_NOT_SET: 0,
  HTTP_BUFFERED_TRACE: 1,
  HTTP_STREAMED_TRACE_SEGMENT: 2,
  SOCKET_BUFFERED_TRACE: 3,
  SOCKET_STREAMED_TRACE_SEGMENT: 4
};

/**
 * @return {proto.envoy.data.tap.v2alpha.TraceWrapper.TraceCase}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.getTraceCase = function() {
  return /** @type {proto.envoy.data.tap.v2alpha.TraceWrapper.TraceCase} */(jspb.Message.computeOneofCase(this, proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.envoy.data.tap.v2alpha.TraceWrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.envoy.data.tap.v2alpha.TraceWrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
    httpBufferedTrace: (f = msg.getHttpBufferedTrace()) && envoy_data_tap_v2alpha_http_pb.HttpBufferedTrace.toObject(includeInstance, f),
    httpStreamedTraceSegment: (f = msg.getHttpStreamedTraceSegment()) && envoy_data_tap_v2alpha_http_pb.HttpStreamedTraceSegment.toObject(includeInstance, f),
    socketBufferedTrace: (f = msg.getSocketBufferedTrace()) && envoy_data_tap_v2alpha_transport_pb.SocketBufferedTrace.toObject(includeInstance, f),
    socketStreamedTraceSegment: (f = msg.getSocketStreamedTraceSegment()) && envoy_data_tap_v2alpha_transport_pb.SocketStreamedTraceSegment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.envoy.data.tap.v2alpha.TraceWrapper}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.envoy.data.tap.v2alpha.TraceWrapper;
  return proto.envoy.data.tap.v2alpha.TraceWrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.envoy.data.tap.v2alpha.TraceWrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.envoy.data.tap.v2alpha.TraceWrapper}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new envoy_data_tap_v2alpha_http_pb.HttpBufferedTrace;
      reader.readMessage(value,envoy_data_tap_v2alpha_http_pb.HttpBufferedTrace.deserializeBinaryFromReader);
      msg.setHttpBufferedTrace(value);
      break;
    case 2:
      var value = new envoy_data_tap_v2alpha_http_pb.HttpStreamedTraceSegment;
      reader.readMessage(value,envoy_data_tap_v2alpha_http_pb.HttpStreamedTraceSegment.deserializeBinaryFromReader);
      msg.setHttpStreamedTraceSegment(value);
      break;
    case 3:
      var value = new envoy_data_tap_v2alpha_transport_pb.SocketBufferedTrace;
      reader.readMessage(value,envoy_data_tap_v2alpha_transport_pb.SocketBufferedTrace.deserializeBinaryFromReader);
      msg.setSocketBufferedTrace(value);
      break;
    case 4:
      var value = new envoy_data_tap_v2alpha_transport_pb.SocketStreamedTraceSegment;
      reader.readMessage(value,envoy_data_tap_v2alpha_transport_pb.SocketStreamedTraceSegment.deserializeBinaryFromReader);
      msg.setSocketStreamedTraceSegment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.envoy.data.tap.v2alpha.TraceWrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.envoy.data.tap.v2alpha.TraceWrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHttpBufferedTrace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      envoy_data_tap_v2alpha_http_pb.HttpBufferedTrace.serializeBinaryToWriter
    );
  }
  f = message.getHttpStreamedTraceSegment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      envoy_data_tap_v2alpha_http_pb.HttpStreamedTraceSegment.serializeBinaryToWriter
    );
  }
  f = message.getSocketBufferedTrace();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      envoy_data_tap_v2alpha_transport_pb.SocketBufferedTrace.serializeBinaryToWriter
    );
  }
  f = message.getSocketStreamedTraceSegment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      envoy_data_tap_v2alpha_transport_pb.SocketStreamedTraceSegment.serializeBinaryToWriter
    );
  }
};


/**
 * optional HttpBufferedTrace http_buffered_trace = 1;
 * @return {?proto.envoy.data.tap.v2alpha.HttpBufferedTrace}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.getHttpBufferedTrace = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.HttpBufferedTrace} */ (
    jspb.Message.getWrapperField(this, envoy_data_tap_v2alpha_http_pb.HttpBufferedTrace, 1));
};


/** @param {?proto.envoy.data.tap.v2alpha.HttpBufferedTrace|undefined} value */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.setHttpBufferedTrace = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.clearHttpBufferedTrace = function() {
  this.setHttpBufferedTrace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.hasHttpBufferedTrace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HttpStreamedTraceSegment http_streamed_trace_segment = 2;
 * @return {?proto.envoy.data.tap.v2alpha.HttpStreamedTraceSegment}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.getHttpStreamedTraceSegment = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.HttpStreamedTraceSegment} */ (
    jspb.Message.getWrapperField(this, envoy_data_tap_v2alpha_http_pb.HttpStreamedTraceSegment, 2));
};


/** @param {?proto.envoy.data.tap.v2alpha.HttpStreamedTraceSegment|undefined} value */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.setHttpStreamedTraceSegment = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.clearHttpStreamedTraceSegment = function() {
  this.setHttpStreamedTraceSegment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.hasHttpStreamedTraceSegment = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SocketBufferedTrace socket_buffered_trace = 3;
 * @return {?proto.envoy.data.tap.v2alpha.SocketBufferedTrace}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.getSocketBufferedTrace = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.SocketBufferedTrace} */ (
    jspb.Message.getWrapperField(this, envoy_data_tap_v2alpha_transport_pb.SocketBufferedTrace, 3));
};


/** @param {?proto.envoy.data.tap.v2alpha.SocketBufferedTrace|undefined} value */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.setSocketBufferedTrace = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.clearSocketBufferedTrace = function() {
  this.setSocketBufferedTrace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.hasSocketBufferedTrace = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SocketStreamedTraceSegment socket_streamed_trace_segment = 4;
 * @return {?proto.envoy.data.tap.v2alpha.SocketStreamedTraceSegment}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.getSocketStreamedTraceSegment = function() {
  return /** @type{?proto.envoy.data.tap.v2alpha.SocketStreamedTraceSegment} */ (
    jspb.Message.getWrapperField(this, envoy_data_tap_v2alpha_transport_pb.SocketStreamedTraceSegment, 4));
};


/** @param {?proto.envoy.data.tap.v2alpha.SocketStreamedTraceSegment|undefined} value */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.setSocketStreamedTraceSegment = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.envoy.data.tap.v2alpha.TraceWrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.clearSocketStreamedTraceSegment = function() {
  this.setSocketStreamedTraceSegment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.envoy.data.tap.v2alpha.TraceWrapper.prototype.hasSocketStreamedTraceSegment = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.envoy.data.tap.v2alpha);
